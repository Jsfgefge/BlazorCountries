@page "/"
@using BlazorCountries.Data
@inject ICountriesService CountriesService
@inject NavigationManager NavigationManager

<div class="col-sm-8">
    <h3>Countries List</h3>
</div>

<div class="col-sm-8">
    <SfGrid @ref="FirstGrid"
            DataSource="@countries"
            AllowSorting="true"
            AllowResizing="true"
            AllowFiltering="true"
            AllowPaging="true"
            AllowReordering="true"
            AllowExcelExport="true"
            ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "ExcelExport", "CsvExport", "FirstPage", "PrevPage","LastPage", "NextPage"})"
            Toolbar="Toolbaritems">
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Countries" RowSelected="RowSelectHandler"></GridEvents>
        <GridColumns>
            <GridColumn Field="@nameof(Countries.CountryName)"
                        HeaderText="Country Name"
                        TextAlign="@TextAlign.Left"
                        Width="90">
            </GridColumn>
        </GridColumns>

        <GridPageSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        </GridPageSettings>
    </SfGrid>
</div>
<SfDialog @ref="DialogDelete" IsModal="true" Width="250px" ShowCloseIcon="true" Visible="false">
    <DialogTemplates>
        <Header> Confirm Delete </Header>
        <Content> Please confirm that you want to delete this record </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Delete" IsPrimary="true" OnClick="@ConfirmDeleteYes" />
        <DialogButton Content="Cancel" IsPrimary="false" OnClick="@ConfirmDeleteNo" />
    </DialogButtons>
</SfDialog>

<SfDialog @ref="DialogNoRecordSelected" IsModal="true" Width="250px" ShowCloseIcon="true" Visible="false">
    <DialogTemplates>
        <Header> Warning! </Header>
        <Content> You must select a country </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Ok" IsPrimary = "true" OnClick="@CloseDialogNoRecordSelected"/>
    </DialogButtons>
</SfDialog>


@code {
    private List<ItemModel> Toolbaritems = new List<ItemModel>();
    private SfGrid<Countries> FirstGrid;
    private int? CountryID;
    SfDialog DialogDelete;
    SfDialog DialogNoRecordSelected;

    // Create an empty list, named countries, of empty Counties objects.
    IEnumerable<Countries> countries;

    protected override async Task OnInitializedAsync() {
        //Populate the list of countries objects from the Countries table.
        countries = await CountriesService.CountriesGetAll();
        Toolbaritems.Add(new ItemModel() { Text = "Add", TooltipText = "Add a new country", PrefixIcon = "e-add" });
        Toolbaritems.Add(new ItemModel() { Text = "Edit", TooltipText = "Edit selected country", PrefixIcon = "e-edit" });
        Toolbaritems.Add(new ItemModel() { Text = "Delete", TooltipText = "Delete selected country", PrefixIcon = "e-delete" });
    }

    public async Task ExcelExport() {
        await this.FirstGrid.ExcelExport();
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args) {
        if (args.Item.Text == "Add") {
            CountryID = 0;
            NavigationManager.NavigateTo($"/countriesaddedit/{CountryID}");
        }
        if (args.Item.Text == "Edit") {
            if (CountryID > 0) {
                NavigationManager.NavigateTo($"/countriesaddedit/{CountryID}");
            }
            else {
                //No record has been selected
                DialogNoRecordSelected.Show();
            }
        }
        if (args.Item.Text == "Delete") {
            if (CountryID > 0) {
                DialogDelete.Show();
            }
            else {
                //No record has been selected
                DialogNoRecordSelected.Show();
            }
        }
    }

    public void RowSelectHandler(RowSelectEventArgs<Countries> args) {
        //{args.Data} returns the current selected record.
        CountryID = args.Data.CountryId;
    }

    public async void ConfirmDeleteNo() {
        await DialogDelete.Hide();
    }

    public async void ConfirmDeleteYes() {
        await CountriesService.CountriesDelete(CountryID.GetValueOrDefault()); //This Deletes the record
        await DialogDelete.Hide();

        //Both following lines requied to refresh the grid
        countries = await CountriesService.CountriesGetAll();
        CountryID = 0;
        StateHasChanged();
    }

    private async Task CloseDialogNoRecordSelected() {
        await this.DialogNoRecordSelected.Hide();
    }

}
